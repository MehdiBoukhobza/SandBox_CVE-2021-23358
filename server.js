const express = require('express');
const app = express();
const _ = require('underscore');
const bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({ extended: true }));

app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Vulnerable Template Example</title>
        </head>
        <body>
            <h1>Enter a Command</h1>
            <form method="POST" action="/execute">
                <input type="text" name="commandInput1" placeholder="Enter a command vulnerable1">
                <input type="text" name="commandInput2" placeholder="Enter a command vulnerable2">
                <input type="text" name="commandInputSafe" placeholder="Enter a command">
                <button type="submit">Submit</button>
            </form>
            <div id="result"></div>
        </body>
        </html>
    `);
});

function sanitizeInput(input) {
  return input.replace(/[^a-zA-Z0-9 _-]/g, ""); // Only allow alphanumeric characters, spaces, underscores, and hyphens
}

app.post('/execute', (req, res) => {
    const userInput1 = req.body.commandInput1;
    const userInput2 = req.body.commandInput2;
    const userInput = req.body.commandInputSafe;

   
    const sanitizedInput = sanitizeInput(userInput);
    console.log(sanitizedInput)


    // This setting is part of the PoC to demonstrate the vulnerability
    if (userInput1) 
      _.templateSettings.variable = `a = this.process.mainModule.require('child_process').execSync('${userInput1}')`;
    if (userInput2) 
      _.templateSettings.variable = `a = this.process.mainModule.require('child_process').execSync('${userInput2}')`;
    if (userInput)
      _.templateSettings.variable = `a = this.process.mainModule.require('child_process').execSync('${sanitizedInput}')`;

    try {
      try {
       if (userInput) {
        const t = _.template("")();
        res.send(`
          <p>Command executed successfully: ${sanitizedInput}</p>
          <pre>${result}</pre>
          <a href="/">Go back</a>
      `);
      }
    } catch (e) {
      res.send(`
        <p>${sanitizedInput}</p>
        <p>command not executed: ${e.message}</p>
        <a href="/">Go back</a>
    `);
    return;
    }
      
      if (userInput1) {
        // Using an empty template to execute the command
        const t = _.template("")();
        res.send(`
            <p>${sanitizedInput}</p>
            <p>Command executed successfully: ${userInput1}</p>
            <a href="/">Go back</a>
        `);
      }
      if (userInput2) {
        // Using an empty template to execute the command
        const t = _.template("")();
        res.send(`
            <p>Command executed successfully: ${userInput2}</p>
            <a href="/">Go back</a>
        `);
      }
    } catch (e) {
        res.send(`
            <p>Error executing command: ${e.message}</p>
            <a href="/">Go back</a>
        `);
    }
});

app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
